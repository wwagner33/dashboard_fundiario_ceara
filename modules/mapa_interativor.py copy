# modules/mapa_interativo.py

"""
Funções para gerar o mapa interativo:
- preprocessar_tudo(df_inter)
- criar_mapa_com_camadas(gdf_inter, sel_regiao)
"""

import folium
import pandas as pd
import geopandas as gpd
import numpy as np
from shapely import wkt

# ————————————————————————————————————————————————————————————————————
# Configuração de cores por categoria
CORES = {
    "Minifúndio": "#9b19f5",
    "Pequena Propriedade": "#0040bf",
    "Média Propriedade": "#e6d800",
    "Grande Propriedade": "#d97f00",
    "Sem Classificação": "#808080"
}

# # ————————————————————————————————————————————————————————————————————
def carregar_dados_por_regiao(data: pd.DataFrame, regiao: str) -> gpd.GeoDataFrame:
    """Filtra e prepara os dados para a região especificada."""
    df = data[
        (data['regiao_administrativa'] == regiao) &
        data['geom'].notna() &
        data['geom'].apply(lambda x: isinstance(x, str))
    ].copy()
    if df.empty:
        raise ValueError(f"Nenhum dado válido encontrado para: {regiao}")
    return df
# ————————————————————————————————————————————————————————————————————
def preprocessar_tudo(df_raw: pd.DataFrame) -> gpd.GeoDataFrame:
    """
    1) Filtra os dados válidos
    2) Converte WKT para Shapely
    3) Converte para GeoDataFrame
    4) Classifica todas as propriedades
    5) Retorna um GeoDataFrame COMPLETO pronto pra filtrar por região.
    """
    # # só pega linhas com geometria WKT válida
    df = df_raw[df_raw['geom'].notna() & df_raw['geom'].apply(lambda x: isinstance(x, str))].copy()
    
    # converte string WKT em shapely
    def to_geom(w):
        try:
            return wkt.loads(w)
        except:
            return None
    
    df['geometry'] = df['geom'].map(to_geom)
    df = df[df['geometry'].notna()]
    
    # monta GeoDataFrame e projeta
    gdf = gpd.GeoDataFrame(df, geometry='geometry', crs='EPSG:31984')
    gdf = gdf.to_crs(epsg=4326)
    
    # Classificação
    conds = [
        (gdf['area'] > 0) & (gdf['area'] < gdf['modulo_fiscal']),
        (gdf['area'] >= gdf['modulo_fiscal']) & (gdf['area'] <= 4 * gdf['modulo_fiscal']),
        (gdf['area'] > 4 * gdf['modulo_fiscal']) & (gdf['area'] <= 15 * gdf['modulo_fiscal']),
        (gdf['area'] > 15 * gdf['modulo_fiscal'])
    ]
    cats = list(CORES.keys())[:-1]
    gdf['categoria'] = np.select(conds, cats, default="Sem Classificação")
    
    return gdf


def criar_mapa_com_camadas(gdf: gpd.GeoDataFrame, regiao: str) -> folium.Map:
    # 1. Centrar o mapa como antes...
    gdf_proj = gdf.to_crs(epsg=31983)
    centro_proj = gdf_proj.geometry.centroid.union_all().centroid
    centro_wgs84 = (
        gpd.GeoSeries([centro_proj], crs='EPSG:31983')
           .to_crs(epsg=4326)[0]
    )
    m = folium.Map(location=[centro_wgs84.y, centro_wgs84.x],
                   zoom_start=10, width="95%", height="800px")

    # 2. Cria um FeatureGroup pra cada categoria
    grupos = {}
    for cat in CORES.keys():
        grupos[cat] = folium.FeatureGroup(name=cat)
        m.add_child(grupos[cat])

    # 3. Adiciona cada geometria ao grupo correto
    for _, row in gdf.iterrows():
        fg = grupos[row['categoria']]
        folium.GeoJson(
            row.geometry,
            style_function=lambda feat, cat=row['categoria']: {
                'fillColor': CORES[cat],
                'color': 'black',
                'weight': 0.5,
                'fillOpacity': 0.7
            },
            tooltip=(
                f"<strong>Nome:</strong>{row['imovel']}<br>"
                f"<strong>Núm. INCRA:</strong>{row['numero_incra']}<br>"
                f"<strong>Situação:</strong>{row['situacao_juridica']}<br>"
                f"<strong>Município:</strong> {row['nome_municipio']}<br>"
                f"<strong>Distrito:</strong> {row['distrito']}<br>"
                f"<strong>Região Administrativa:</strong>{row['regiao_administrativa']}<br>"
                f"<strong>Área:</strong> {row['area']} ha<br>"
                f"<strong>Categoria:</strong> {row['categoria']}<br>"
            )
        ).add_to(fg)

    # 4. Legenda estática  e controle de camadas
    legend = f'''
      <div style="position: fixed; top: 150px; right: 150px; z-index:1000;
                  background:white; padding:10px; border:2px solid grey;
                  border-radius:5px; font-size:14px;">
        <strong>{regiao}</strong><br>
        {'<br>'.join([f'<i style="color:{c}">■</i> {cat}' 
            for cat,c in CORES.items()])}
      </div>
    '''
    m.get_root().html.add_child(folium.Element(legend))

    # 5. Adiciona o controle de camadas
    folium.LayerControl(collapsed=True).add_to(m)

    return m
